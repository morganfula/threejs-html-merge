var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _three = require('three');
var _imagesloaded = require('imagesloaded');
var _imagesloadedDefault = _parcelHelpers.interopDefault(_imagesloaded);
var _fontfaceobserver = require('fontfaceobserver');
var _fontfaceobserverDefault = _parcelHelpers.interopDefault(_fontfaceobserver);
var _scroll = require('./scroll');
var _scrollDefault = _parcelHelpers.interopDefault(_scroll);
var _threeExamplesJsmControlsOrbitControlsJs = require('three/examples/jsm/controls/OrbitControls.js');
var _shaderFragmentGlsl = require('./shader/fragment.glsl');
var _shaderFragmentGlslDefault = _parcelHelpers.interopDefault(_shaderFragmentGlsl);
var _shaderVertexGlsl = require('./shader/vertex.glsl');
var _shaderVertexGlslDefault = _parcelHelpers.interopDefault(_shaderVertexGlsl);
var _urlImgOceanJpg = require('url:../img/ocean.jpg');
var _urlImgOceanJpgDefault = _parcelHelpers.interopDefault(_urlImgOceanJpg);
class Sketch {
  constructor(options) {
    this.time = 0;
    this.container = options.dom;
    this.scene = new _three.Scene();
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.camera = new _three.PerspectiveCamera(70, this.width / this.height, 100, 2000);
    this.camera.position.z = 600;
    this.camera.fov = 2 * Math.atan(this.height / 2 / 600) * (180 / Math.PI);
    this.renderer = new _three.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    this.renderer.setSize(this.width, this.height);
    this.container.appendChild(this.renderer.domElement);
    this.controls = new _threeExamplesJsmControlsOrbitControlsJs.OrbitControls(this.camera, this.renderer.domElement);
    this.images = [...document.querySelectorAll('img')];
    const fontOpen = new Promise(resolve => {
      new _fontfaceobserverDefault.default('Open Sans').load().then(() => {
        resolve();
      });
    });
    const fontPlayfair = new Promise(resolve => {
      new _fontfaceobserverDefault.default('Playfair Display').load().then(() => {
        resolve();
      });
    });
    // Preload images
    const preloadImages = new Promise((resolve, reject) => {
      _imagesloadedDefault.default(document.querySelectorAll('img'), {
        background: true
      }, resolve);
    });
    let allDone = [fontOpen, fontPlayfair, preloadImages];
    this.currentScroll = 0;
    Promise.all(allDone).then(() => {
      this.Scroll = new _scrollDefault.default();
      this.addImages();
      this.setPosition();
      this.resize();
      this.setupResize();
      // this.addObjects();
      this.render();
    });
  }
  setupResize() {
    window.addEventListener('resize', this.resize.bind(this));
  }
  resize() {
    // recalculate the size of the container
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    // re set the renderer
    this.renderer.setSize(this.width, this.height);
    // change aspect ratio of the camera
    this.camera.aspect = this.width / this.height;
    this.camera.updateProjectionMatrix();
  }
  addImages() {
    this.imageStore = this.images.map(img => {
      let bounds = img.getBoundingClientRect();
      let geometry = new _three.PlaneBufferGeometry(bounds.width, bounds.height, 1, 1);
      let texture = new _three.Texture(img);
      texture.needsUpdate = true;
      let material = new _three.MeshBasicMaterial({
        // color: 0xff0000,
        map: texture
      });
      let mesh = new _three.Mesh(geometry, material);
      this.scene.add(mesh);
      return {
        img: img,
        mesh: mesh,
        top: bounds.top,
        left: bounds.left,
        width: bounds.width,
        height: bounds.height
      };
    });
    console.log(this.imageStore);
  }
  setPosition() {
    this.imageStore.forEach(o => {
      o.mesh.position.y = this.currentScroll - o.top + this.height / 2 - o.height / 2;
      o.mesh.position.x = o.left - this.width / 2 + o.width / 2;
    });
  }
  addObjects() {
    this.geometry = new _three.PlaneBufferGeometry(200, 400, 10, 10);
    // this.geometry = new THREE.SphereBufferGeometry(0.4, 50, 50);
    this.material = new _three.MeshNormalMaterial();
    this.material = new _three.ShaderMaterial({
      uniforms: {
        time: {
          value: 0
        },
        oceanTexture: {
          value: new _three.TextureLoader().load(_urlImgOceanJpgDefault.default)
        }
      },
      side: _three.DoubleSide,
      fragmentShader: _shaderFragmentGlslDefault.default,
      vertexShader: _shaderVertexGlslDefault.default,
      wireframe: true
    });
    this.mesh = new _three.Mesh(this.geometry, this.material);
    this.scene.add(this.mesh);
  }
  render() {
    this.time += 0.05;
    // this.mesh.rotation.x = this.time / 2000;
    // this.mesh.rotation.y = this.time / 1000;
    // this.material.uniforms.time.value = this.time;
    this.renderer.render(this.scene, this.camera);
    window.requestAnimationFrame(this.render.bind(this));
  }
}
exports.default = Sketch;
new Sketch({
  dom: document.getElementById('container')
});
function init() {
  scene = new _three.Scene();
  renderer = new _three.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setAnimationLoop(animation);
  document.body.appendChild(renderer.domElement);
}
function animation(time) {}

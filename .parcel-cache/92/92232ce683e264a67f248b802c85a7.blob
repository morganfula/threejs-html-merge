var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _three = require('three');
var _shaderFragmentGlsl = require('./shader/fragment.glsl');
var _shaderFragmentGlslDefault = _parcelHelpers.interopDefault(_shaderFragmentGlsl);
var _shaderVertexGlsl = require('./shader/vertex.glsl');
var _shaderVertexGlslDefault = _parcelHelpers.interopDefault(_shaderVertexGlsl);
var _datGui = require('dat.gui');
require('gsap');
class Sketch {
  constructor(options) {
    this.scene = new _three.Scene();
    this.container = options.dom;
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.renderer = new _three.WebGLRenderer();
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    this.renderer.setSize(this.width, this.height);
    this.renderer.setClearColor(0xeeeeee, 1);
    this.container.appendChild(this.renderer.domElement);
    this.camera = new _three.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);
    // var frustumSize = 10;
    // var aspect = window.innerWidth / window.innerHeight;
    // this.camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, -1000, 1000 );
    this.camera.position.set(0, 0, 2);
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.time = 0;
    this.isPlaying = true;
    this.addObjects();
    this.resize();
    this.render();
    this.setupResize();
  }
  settings() {
    let that = this;
    this.settings = {
      progress: 0
    };
    this.gui = new _datGui.GUI();
    this.gui.add(this.settings, 'progress', 0, 1, 0.01);
  }
  setupResize() {
    window.addEventListener('resize', this.resize.bind(this));
  }
  resize() {
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.renderer.setSize(this.width, this.height);
    this.camera.aspect = this.width / this.height;
    this.camera.updateProjectionMatrix();
  }
  addObjects() {
    let that = this;
    this.material = new _three.ShaderMaterial({
      extensions: {
        derivatives: '#extension GL_OES_standard_derivatives : enable'
      },
      side: _three.DoubleSide,
      uniforms: {
        time: {
          value: 0
        },
        resolution: {
          value: new _three.Vector4()
        }
      },
      // wireframe: true,
      // transparent: true,
      vertexShader: _shaderVertexGlslDefault.default,
      fragmentShader: _shaderFragmentGlslDefault.default
    });
    this.geometry = new _three.PlaneGeometry(1, 1, 1, 1);
    this.plane = new _three.Mesh(this.geometry, this.material);
    this.scene.add(this.plane);
  }
  stop() {
    this.isPlaying = false;
  }
  play() {
    if (!this.isPlaying) {
      this.render();
      this.isPlaying = true;
    }
  }
  render() {
    if (!this.isPlaying) return;
    this.time += 0.05;
    this.material.uniforms.time.value = this.time;
    requestAnimationFrame(this.render.bind(this));
    this.renderer.render(this.scene, this.camera);
  }
}
exports.default = Sketch;
new Sketch({
  dom: document.getElementById('container')
});
